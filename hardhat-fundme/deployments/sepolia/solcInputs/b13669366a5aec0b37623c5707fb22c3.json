{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n//get funds from users\n//withdraw funds\n//set minimum funding valuein USD\n//756611\n//736642\n//736630\n//713483\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint;\n    uint public constant MIN_USD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint) public addressToAmountFunded;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConverstionRate(priceFeed) > MIN_USD,\n            \"didn't send enough \"\n        ); // 1e18 = 1*10**18 == 1000000000000000\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public only_i_owner {\n        for (\n            uint funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n\n        //call to send ether\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    //this is used to check some condition without recreating multiple times\n    modifier only_i_owner() {\n        // require(msg.sender == i_owner,\" Sender is not i_owner\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        //below is to execute other code of the function\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)internal  view returns(uint){\n     //address 0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf\n     //ABI \n    (,int price,,,) = priceFeed.latestRoundData();\n    //ETH in terms of USD\n    return uint(price * 1e10); // 1**10 == 10000000000\n  }\n  function getConverstionRate(uint ethAmount,AggregatorV3Interface priceFeed) internal  view returns (uint) {\n    uint ethPrice = getPrice(priceFeed);\n    uint ethAmountInUsd = (ethPrice * ethAmount) /1e18;\n    return  ethAmountInUsd;\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}